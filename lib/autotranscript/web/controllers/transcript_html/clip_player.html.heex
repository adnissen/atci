<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Clip Player - <%= @filename %></title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        * {
            box-sizing: border-box;
        }
        
        body {
            margin: 0;
            padding: 0;
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #0a0a0a 0%, #1a1a1a 50%, #0f0f0f 100%);
            color: #e5e5e5;
            min-height: 100vh;
            line-height: 1.6;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 2rem;
        }
        
        .header {
            margin-bottom: 2rem;
            text-align: center;
        }
        
        .title {
            font-size: 2.5rem;
            font-weight: 700;
            margin-bottom: 0.5rem;
            background: linear-gradient(135deg, #3b82f6 0%, #8b5cf6 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }
        
        .clip-info {
            font-size: 1.1rem;
            color: #a1a1aa;
            font-weight: 500;
        }
        
        .video-container {
            position: relative;
            width: 100%;
            background: #000;
            border-radius: 16px;
            overflow: hidden;
            box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.8);
            margin-bottom: 2rem;
            border: 1px solid #27272a;
        }
        
        video, #gif-player, #audio-player {
            width: 100%;
            height: auto;
            display: block;
        }
        
        .loading-container {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            min-height: 300px;
            background: rgba(0, 0, 0, 0.95);
            backdrop-filter: blur(10px);
            color: #d4d4d8;
        }
        
        .loading-spinner {
            width: 48px;
            height: 48px;
            border: 3px solid #3f3f46;
            border-top: 3px solid #3b82f6;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin-bottom: 1.5rem;
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        .loading-text {
            font-size: 1.125rem;
            font-weight: 600;
            margin-bottom: 0.5rem;
        }
        
        .loading-subtext {
            font-size: 0.875rem;
            color: #71717a;
        }
        
        .form-container {
            background: rgba(24, 24, 27, 0.8);
            backdrop-filter: blur(10px);
            border: 1px solid #27272a;
            padding: 2rem;
            border-radius: 16px;
            margin-bottom: 2rem;
            box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.5);
        }
        
        .form-row {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 1.5rem;
            margin-bottom: 1.5rem;
        }
        
        .form-group {
            display: flex;
            flex-direction: column;
        }
        
        .form-group label {
            font-size: 0.875rem;
            font-weight: 600;
            color: #d4d4d8;
            margin-bottom: 0.5rem;
            letter-spacing: 0.025em;
        }
        
        .form-group input, 
        .form-group textarea {
            width: 100%;
            padding: 0.875rem 1rem;
            border: 2px solid #3f3f46;
            border-radius: 8px;
            background: rgba(9, 9, 11, 0.8);
            color: #e5e5e5;
            font-size: 0.875rem;
            font-family: inherit;
            transition: all 0.2s ease;
        }
        
        .form-group input:focus, 
        .form-group textarea:focus {
            outline: none;
            border-color: #3b82f6;
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
        }
        
        .form-group textarea {
            resize: vertical;
            min-height: 100px;
        }
        
        .checkbox-group {
            display: flex;
            align-items: center;
            gap: 0.75rem;
            padding: 0.75rem 0;
        }
        
        .checkbox-group input[type="checkbox"] {
            width: 1.25rem;
            height: 1.25rem;
            border: 2px solid #3f3f46;
            border-radius: 4px;
            background: rgba(9, 9, 11, 0.8);
            cursor: pointer;
            transition: all 0.2s ease;
        }
        
        .checkbox-group input[type="checkbox"]:checked {
            background: #3b82f6;
            border-color: #3b82f6;
        }
        
        .checkbox-group label {
            margin: 0;
            font-size: 0.875rem;
            font-weight: 500;
            cursor: pointer;
            color: #d4d4d8;
        }
        
        .button-group {
            display: flex;
            gap: 1rem;
            justify-content: center;
            margin-top: 1.5rem;
        }
        
        .btn {
            padding: 0.875rem 2rem;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-size: 0.875rem;
            font-weight: 600;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            transition: all 0.2s ease;
            letter-spacing: 0.025em;
            text-transform: uppercase;
        }
        
        .btn-success {
            background: linear-gradient(135deg, #059669 0%, #047857 100%);
            color: white;
            box-shadow: 0 4px 14px 0 rgba(5, 150, 105, 0.3);
        }
        
        .btn-success:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px 0 rgba(5, 150, 105, 0.4);
        }
        
        .btn-success:active {
            transform: translateY(0);
        }
        
        .controls {
            text-align: center;
            padding: 2rem 0;
        }
        
        .back-link {
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            color: #71717a;
            text-decoration: none;
            font-size: 1rem;
            font-weight: 500;
            transition: all 0.2s ease;
            padding: 0.5rem 1rem;
            border-radius: 6px;
        }
        
        .back-link:hover {
            color: #3b82f6;
            background: rgba(59, 130, 246, 0.1);
        }
        
        .back-link::before {
            content: "‚Üê";
            font-size: 1.25rem;
        }
        
        /* Responsive design */
        @media (max-width: 768px) {
            .container {
                padding: 1rem;
            }
            
            .title {
                font-size: 2rem;
            }
            
            .form-container {
                padding: 1.5rem;
            }
            
            .form-row {
                grid-template-columns: 1fr;
                gap: 1rem;
            }
            
            .button-group {
                flex-direction: column;
                align-items: center;
            }
        }
        
        /* Smooth animations */
        .video-container,
        .form-container {
            animation: fadeInUp 0.6s ease-out;
        }
        
        @keyframes fadeInUp {
            from {
                opacity: 0;
                transform: translateY(20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
        
        /* Custom scrollbar */
        ::-webkit-scrollbar {
            width: 8px;
        }
        
        ::-webkit-scrollbar-track {
            background: #18181b;
        }
        
        ::-webkit-scrollbar-thumb {
            background: #3f3f46;
            border-radius: 4px;
        }
        
        ::-webkit-scrollbar-thumb:hover {
            background: #52525b;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1 class="title"><%= @filename %></h1>
            <div class="clip-info">
                Playing <%= case @format do
                  "gif" -> "GIF"
                  "mp3" -> "audio"
                  _ -> "video"
                end %> clip from <%= @start_time %>s to <%= @end_time %>s
            </div>
        </div>
        
        <div class="video-container">
            <div id="loading-container" class="loading-container" style="display: none;">
                <div class="loading-spinner"></div>
                <div class="loading-text">Processing...</div>
                <div class="loading-subtext">Generating your clip, please wait</div>
            </div>
            <video controls autoplay id="video-player" style={if @format == "mp4", do: "display: block;", else: "display: none;"}>
                <source src={@clip_url}>
                Your browser does not support the video tag.
            </video>
            <img id="gif-player" src={@clip_url} style={if @format == "gif", do: "display: block;", else: "display: none;"} />
            <audio controls autoplay id="audio-player" style={if @format == "mp3", do: "display: block;", else: "display: none;"}>
                <source src={@clip_url}>
                Your browser does not support the audio element.
            </audio>
        </div>
        
        <div class="form-container">
            <form method="GET" action={"/clip_player/#{URI.encode(@filename)}"}>
                <div class="form-row">
                    <div class="form-group">
                        <label for="start_time">Start Time (seconds)</label>
                        <input type="number" id="start_time" name="start_time" value={@start_time} step="0.1" min="0" required>
                    </div>
                    <div class="form-group">
                        <label for="end_time">End Time (seconds)</label>
                        <input type="number" id="end_time" name="end_time" value={@end_time} step="0.1" min="0" required>
                    </div>
                    <div class="form-group">
                        <label for="font_size">Font Size</label>
                        <input type="number" id="font_size" name="font_size" value={@font_size} min="10" max="500" placeholder="Auto">
                    </div>
                </div>
                
                <div class="form-row">
                    <div class="form-group">
                        <label for="text">Text Overlay</label>
                        <textarea id="text" name="text" placeholder="Enter text to overlay on video"><%= @text %></textarea>
                    </div>
                </div>
                
                <div class="form-row">
                    <div class="form-group">
                        <div class="checkbox-group">
                            <input type="checkbox" id="display_text" name="display_text" value="true" {if @display_text == "true", do: [checked: "checked"], else: []}>
                            <label for="display_text">Show Text Overlay</label>
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="format">Format</label>
                        <select id="format" name="format" style="width: 100%; padding: 0.875rem 1rem; border: 2px solid #3f3f46; border-radius: 8px; background: rgba(9, 9, 11, 0.8); color: #e5e5e5; font-size: 0.875rem; font-family: inherit;">
                            <option value="mp4" {if @format == "mp4", do: [selected: "selected"], else: []}>MP4 Video</option>
                            <option value="gif" {if @format == "gif", do: [selected: "selected"], else: []}>GIF</option>
                            <option value="mp3" {if @format == "mp3", do: [selected: "selected"], else: []}>MP3 Audio</option>
                        </select>
                    </div>
                </div>
                
                <div class="button-group">
                    <a href={@clip_url} download={case @format do
                        "gif" -> "clip.gif"
                        "mp3" -> "clip.mp3"
                        _ -> "clip.mp4"
                    end} class="btn btn-success" id="download-btn">
                        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                            <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"/>
                            <polyline points="7,10 12,15 17,10"/>
                            <line x1="12" y1="15" x2="12" y2="3"/>
                        </svg>
                        Download <%= case @format do
                          "gif" -> "GIF"
                          "mp3" -> "MP3"
                          _ -> "Clip"
                        end %>
                    </a>
                </div>
            </form>
        </div>
        
        <div class="controls">
            <a href="/app" class="back-link">Back to Transcripts</a>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const form = document.querySelector('form');
            const video = document.getElementById('video-player');
            const gifImg = document.getElementById('gif-player');
            const audio = document.getElementById('audio-player');
            const loadingContainer = document.getElementById('loading-container');
            const loadingText = document.querySelector('.loading-text');
            const loadingSubtext = document.querySelector('.loading-subtext');
            const clipInfo = document.querySelector('.clip-info');
            const downloadLink = document.querySelector('.btn-success');
            
            // Get form inputs
            const startTimeInput = document.getElementById('start_time');
            const endTimeInput = document.getElementById('end_time');
            const textInput = document.getElementById('text');
            const fontSizeInput = document.getElementById('font_size');
            const displayTextInput = document.getElementById('display_text');
            const formatSelect = document.getElementById('format');
            
            // Cache for GIF blob URL to avoid re-processing
            let cachedGifBlobUrl = null;
            
            // Function to show loading state
            function showLoading(format = "mp4") {
                loadingContainer.style.display = 'flex';
                video.style.display = 'none';
                gifImg.style.display = 'none';
                audio.style.display = 'none';
                
                if (format === 'gif') {
                    loadingText.textContent = 'Generating GIF...';
                    loadingSubtext.textContent = 'This may take a moment, please wait';
                } else if (format === 'mp3') {
                    loadingText.textContent = 'Extracting audio...';
                    loadingSubtext.textContent = 'Preparing your MP3 clip';
                } else {
                    loadingText.textContent = 'Processing video...';
                    loadingSubtext.textContent = 'Preparing your clip';
                }
            }
            
            // Function to hide loading state
            function hideLoading() {
                loadingContainer.style.display = 'none';
            }
            
            // Function to fetch GIF as blob and create blob URL for download
            async function fetchGifAsBlob(url) {
                try {
                    const response = await fetch(url);
                    if (!response.ok) throw new Error('Failed to fetch GIF');
                    const blob = await response.blob();
                    return URL.createObjectURL(blob);
                } catch (error) {
                    console.error('Error fetching GIF blob:', error);
                    return url; // Fallback to original URL
                }
            }
            
            // Function to update video and download link
            function updateVideo() {
                const startTime = startTimeInput.value;
                const endTime = endTimeInput.value;
                const text = textInput.value;
                const fontSize = fontSizeInput.value;
                const displayText = displayTextInput.checked;
                const format = formatSelect.value;
                
                // Validate required fields
                if (!startTime || !endTime || parseFloat(startTime) < 0 || parseFloat(endTime) <= parseFloat(startTime)) {
                    return;
                }
                
                // Build clip parameters for the video clip
                const clipParams = new URLSearchParams({
                    filename: '<%= @filename %>',
                    start_time: startTime,
                    end_time: endTime
                });
                
                // Build URL parameters for the page URL
                const urlParams = new URLSearchParams({
                    start_time: startTime,
                    end_time: endTime
                });
                
                // Add optional parameters
                if (text && text.trim() !== '') {
                    clipParams.set('text', text);
                    urlParams.set('text', text);
                }
                if (fontSize && fontSize.trim() !== '') {
                    clipParams.set('font_size', fontSize);
                    urlParams.set('font_size', fontSize);
                }
                if (displayText) {
                    clipParams.set('display_text', 'true');
                    urlParams.set('display_text', 'true');
                }
                if (format) {
                    clipParams.set('format', format);
                    urlParams.set('format', format);
                }
                
                // Update video, gif, or audio source
                const newClipUrl = '/clip?' + clipParams.toString();
                
                // Show loading state
                showLoading(format);
                
                // Toggle display between video, gif, and audio
                if (format === 'gif') {
                    // Create new image to preload GIF
                    const tempImg = new Image();
                    tempImg.onload = function() {
                        // GIF loaded successfully
                        gifImg.src = newClipUrl;
                        hideLoading();
                        gifImg.style.display = 'block';
                        
                        // Cache GIF as blob for efficient downloads
                        fetchGifAsBlob(newClipUrl).then(blobUrl => {
                            // Clean up old blob URL
                            if (cachedGifBlobUrl) {
                                URL.revokeObjectURL(cachedGifBlobUrl);
                            }
                            cachedGifBlobUrl = blobUrl;
                            
                            // Update download link to use cached blob
                            downloadLink.href = cachedGifBlobUrl;
                        });
                    };
                    tempImg.onerror = function() {
                        // GIF failed to load
                        hideLoading();
                        gifImg.style.display = 'block';
                        gifImg.src = newClipUrl; // Still try to show it
                    };
                    tempImg.src = newClipUrl;
                } else if (format === 'mp3') {
                    const audioSource = audio.querySelector('source');
                    audioSource.src = newClipUrl;
                    
                    // Clean up cached GIF blob URL if switching away from GIF
                    if (cachedGifBlobUrl) {
                        URL.revokeObjectURL(cachedGifBlobUrl);
                        cachedGifBlobUrl = null;
                    }
                    
                    // Use direct URL for audio downloads
                    downloadLink.href = newClipUrl;
                    
                    // Handle audio loading
                    audio.onloadeddata = function() {
                        hideLoading();
                        audio.style.display = 'block';
                    };
                    audio.onerror = function() {
                        hideLoading();
                        audio.style.display = 'block'; // Still try to show it
                    };
                    audio.load();
                } else {
                    const videoSource = video.querySelector('source');
                    videoSource.src = newClipUrl;
                    
                    // Clean up cached GIF blob URL if switching away from GIF
                    if (cachedGifBlobUrl) {
                        URL.revokeObjectURL(cachedGifBlobUrl);
                        cachedGifBlobUrl = null;
                    }
                    
                    // Use direct URL for video downloads
                    downloadLink.href = newClipUrl;
                    
                    // Handle video loading
                    video.onloadeddata = function() {
                        hideLoading();
                        video.style.display = 'block';
                    };
                    video.onerror = function() {
                        hideLoading();
                        video.style.display = 'block'; // Still try to show it
                    };
                    video.load();
                }
                
                // Generate filename from first 50 characters of text input
                let filename = format === 'gif' ? 'clip.gif' : format === 'mp3' ? 'clip.mp3' : 'clip.mp4';
                if (text && text.trim() !== '') {
                    const sanitizedText = text.trim()
                        .substring(0, 50)
                        .replace(/[^a-zA-Z0-9\s\-_]/g, '')
                        .replace(/\s+/g, '_');
                    if (sanitizedText) {
                        filename = sanitizedText + (format === 'gif' ? '.gif' : format === 'mp3' ? '.mp3' : '.mp4');
                    }
                }
                
                // Update download link properties (href is set above based on mode)
                downloadLink.download = filename;
                downloadLink.innerHTML = `
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"/>
                        <polyline points="7,10 12,15 17,10"/>
                        <line x1="12" y1="15" x2="12" y2="3"/>
                    </svg>
                    Download ${format === 'gif' ? 'GIF' : format === 'mp3' ? 'MP3' : 'Clip'}
                `;
                
                // Update clip info
                clipInfo.textContent = `Playing ${format === 'gif' ? 'GIF' : format === 'mp3' ? 'audio' : 'video'} clip from ${startTime}s to ${endTime}s`;
                
                // Update browser URL
                const newUrl = window.location.pathname + '?' + urlParams.toString();
                history.replaceState(null, '', newUrl);
            }
            
            // Add event listeners with debouncing
            let updateTimeout;
            function debouncedUpdate() {
                clearTimeout(updateTimeout);
                updateTimeout = setTimeout(updateVideo, 500); // 500ms delay
            }
            
            // Set initial download filename and cache GIF if needed
            updateVideo();
            
            // If page loads with GIF mode already enabled, cache the initial GIF
            if (formatSelect.value === 'gif' && gifImg.src) {
                hideLoading(); // Make sure loading is hidden on initial load
                fetchGifAsBlob(gifImg.src).then(blobUrl => {
                    cachedGifBlobUrl = blobUrl;
                    downloadLink.href = cachedGifBlobUrl;
                });
            } else {
                hideLoading(); // Make sure loading is hidden on initial load
            }
            
            // Listen for input changes
            startTimeInput.addEventListener('input', debouncedUpdate);
            endTimeInput.addEventListener('input', debouncedUpdate);
            textInput.addEventListener('input', debouncedUpdate);
            fontSizeInput.addEventListener('input', debouncedUpdate);
            displayTextInput.addEventListener('change', updateVideo); // Immediate update for checkbox
            formatSelect.addEventListener('change', updateVideo); // Immediate update for format select
            
            // Clean up blob URLs when page is unloaded
            window.addEventListener('beforeunload', function() {
                if (cachedGifBlobUrl) {
                    URL.revokeObjectURL(cachedGifBlobUrl);
                }
            });
        });
    </script>
</body>
</html> 