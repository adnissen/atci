<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Clip Player - <%= @filename %></title>
    <style>
        body {
            margin: 0;
            padding: 20px;
            font-family: Arial, sans-serif;
            background-color: #1a1a1a;
            color: white;
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
        }
        .video-container {
            width: 100%;
            background-color: #000;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.3);
        }
        video {
            width: 100%;
            height: auto;
            display: block;
        }
        .title {
            margin-bottom: 20px;
            font-size: 24px;
            font-weight: bold;
        }
        .controls {
            margin-top: 20px;
            text-align: center;
        }
        .back-link {
            color: #4a9eff;
            text-decoration: none;
            font-size: 16px;
        }
        .back-link:hover {
            text-decoration: underline;
        }
        .clip-info {
            margin-bottom: 10px;
            font-size: 14px;
            color: #888;
        }
        .form-container {
            background-color: #2a2a2a;
            padding: 20px;
            border-radius: 8px;
            margin-bottom: 20px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
        }
        .form-row {
            display: flex;
            gap: 15px;
            margin-bottom: 15px;
            flex-wrap: wrap;
        }
        .form-group {
            flex: 1;
            min-width: 150px;
        }
        .form-group label {
            display: block;
            margin-bottom: 5px;
            font-size: 14px;
            color: #ccc;
        }
        .form-group input, .form-group textarea {
            width: 100%;
            padding: 8px;
            border: 1px solid #444;
            border-radius: 4px;
            background-color: #1a1a1a;
            color: white;
            font-size: 14px;
        }
        .form-group input:focus, .form-group textarea:focus {
            outline: none;
            border-color: #4a9eff;
        }
        .checkbox-group {
            display: flex;
            align-items: center;
            gap: 8px;
        }
        .checkbox-group input[type="checkbox"] {
            width: auto;
        }
        .button-group {
            display: flex;
            gap: 10px;
            justify-content: flex-start;
        }
        .btn {
            padding: 10px 20px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 14px;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 5px;
            transition: background-color 0.2s;
        }
        .btn-primary {
            background-color: #4a9eff;
            color: white;
        }
        .btn-primary:hover {
            background-color: #357abd;
        }
        .btn-secondary {
            background-color: #6c757d;
            color: white;
        }
        .btn-secondary:hover {
            background-color: #545b62;
        }
        .btn-success {
            background-color: #28a745;
            color: white;
        }
        .btn-success:hover {
            background-color: #218838;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="title"><%= @filename %> (Clip)</div>
        
        <div class="clip-info">
            Playing video clip from <%= @start_time %>s to <%= @end_time %>s
        </div>
        
        <div class="video-container">
            <video controls autoplay id="video-player" style={if @gif == "true", do: "display: none;", else: "display: block;"}>
                <source src={@clip_url}>
                Your browser does not support the video tag.
            </video>
            <img id="gif-player" src={@clip_url} style={if @gif == "true", do: "display: block; width: 100%;", else: "display: none;"} />
        </div>
        
        <div class="form-container">
            <form method="GET" action={"/clip_player/#{URI.encode(@filename)}"}>
                <div class="form-row">
                    <div class="form-group">
                        <label for="start_time">Start Time (seconds)</label>
                        <input type="number" id="start_time" name="start_time" value={@start_time} step="0.1" min="0" required>
                    </div>
                    <div class="form-group">
                        <label for="end_time">End Time (seconds)</label>
                        <input type="number" id="end_time" name="end_time" value={@end_time} step="0.1" min="0" required>
                    </div>
                    <div class="form-group">
                        <label for="font_size">Font Size</label>
                        <input type="number" id="font_size" name="font_size" value={@font_size} min="10" max="500" placeholder="Auto">
                    </div>
                </div>
                
                <div class="form-row">
                    <div class="form-group">
                        <label for="text">Text Overlay</label>
                        <textarea id="text" name="text" rows="3" placeholder="Enter text to overlay on video"><%= @text %></textarea>
                    </div>
                </div>
                
                <div class="form-row">
                    <div class="form-group">
                        <div class="checkbox-group">
                            <input type="checkbox" id="display_text" name="display_text" value="true" {if @display_text == "true", do: [checked: "checked"], else: []}>
                            <label for="display_text">Show Text Overlay</label>
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="checkbox-group">
                            <input type="checkbox" id="gif" name="gif" value="true" {if @gif == "true", do: [checked: "checked"], else: []}>
                            <label for="gif">Generate GIF</label>
                        </div>
                    </div>
                </div>
                
                <div class="button-group">
                    <a href={@clip_url} download={if @gif == "true", do: "clip.gif", else: "clip.mp4"} class="btn btn-success" id="download-btn">Download {if @gif == "true", do: "GIF", else: "Clip"}</a>
                </div>
            </form>
        </div>
        
        <div class="controls">
            <a href="/app" class="back-link">‚Üê Back to Transcripts</a>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const form = document.querySelector('form');
            const video = document.getElementById('video-player');
            const gifImg = document.getElementById('gif-player');
            const clipInfo = document.querySelector('.clip-info');
            const downloadLink = document.querySelector('.btn-success');
            
            // Get form inputs
            const startTimeInput = document.getElementById('start_time');
            const endTimeInput = document.getElementById('end_time');
            const textInput = document.getElementById('text');
            const fontSizeInput = document.getElementById('font_size');
            const displayTextInput = document.getElementById('display_text');
            const gifInput = document.getElementById('gif');
            
            // Function to update video and download link
            function updateVideo() {
                const startTime = startTimeInput.value;
                const endTime = endTimeInput.value;
                const text = textInput.value;
                const fontSize = fontSizeInput.value;
                const displayText = displayTextInput.checked;
                const gif = gifInput.checked;
                
                // Validate required fields
                if (!startTime || !endTime || parseFloat(startTime) < 0 || parseFloat(endTime) <= parseFloat(startTime)) {
                    return;
                }
                
                // Build clip parameters for the video clip
                const clipParams = new URLSearchParams({
                    filename: '<%= @filename %>',
                    start_time: startTime,
                    end_time: endTime
                });
                
                // Build URL parameters for the page URL
                const urlParams = new URLSearchParams({
                    start_time: startTime,
                    end_time: endTime
                });
                
                // Add optional parameters
                if (text && text.trim() !== '') {
                    clipParams.set('text', text);
                    urlParams.set('text', text);
                }
                if (fontSize && fontSize.trim() !== '') {
                    clipParams.set('font_size', fontSize);
                    urlParams.set('font_size', fontSize);
                }
                if (displayText) {
                    clipParams.set('display_text', 'true');
                    urlParams.set('display_text', 'true');
                }
                if (gif) {
                    clipParams.set('gif', 'true');
                    urlParams.set('gif', 'true');
                }
                
                // Update video or gif source
                const newClipUrl = '/clip?' + clipParams.toString();
                
                // Toggle display between video and gif
                if (gif) {
                    video.style.display = 'none';
                    gifImg.style.display = 'block';
                    gifImg.src = newClipUrl;
                } else {
                    video.style.display = 'block';
                    gifImg.style.display = 'none';
                    const videoSource = video.querySelector('source');
                    videoSource.src = newClipUrl;
                    video.load();
                }
                
                // Generate filename from first 50 characters of text input
                let filename = gif ? 'clip.gif' : 'clip.mp4';
                if (text && text.trim() !== '') {
                    const sanitizedText = text.trim()
                        .substring(0, 50)
                        .replace(/[^a-zA-Z0-9\s\-_]/g, '')
                        .replace(/\s+/g, '_');
                    if (sanitizedText) {
                        filename = sanitizedText + (gif ? '.gif' : '.mp4');
                    }
                }
                
                // Update download link
                downloadLink.href = newClipUrl;
                downloadLink.download = filename;
                downloadLink.textContent = 'Download ' + (gif ? 'GIF' : 'Clip');
                
                // Update clip info
                clipInfo.textContent = `Playing ${gif ? 'GIF' : 'video'} clip from ${startTime}s to ${endTime}s`;
                
                // Update browser URL
                const newUrl = window.location.pathname + '?' + urlParams.toString();
                history.replaceState(null, '', newUrl);
            }
            
            // Add event listeners with debouncing
            let updateTimeout;
            function debouncedUpdate() {
                clearTimeout(updateTimeout);
                updateTimeout = setTimeout(updateVideo, 500); // 500ms delay
            }
            
            // Set initial download filename
            updateVideo();
            
            // Listen for input changes
            startTimeInput.addEventListener('input', debouncedUpdate);
            endTimeInput.addEventListener('input', debouncedUpdate);
            textInput.addEventListener('input', debouncedUpdate);
            fontSizeInput.addEventListener('input', debouncedUpdate);
            displayTextInput.addEventListener('change', updateVideo); // Immediate update for checkbox
            gifInput.addEventListener('change', updateVideo); // Immediate update for checkbox
        });
    </script>
</body>
</html> 