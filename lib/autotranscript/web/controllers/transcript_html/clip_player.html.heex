<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Clip Player - <%= @filename %></title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        * {
            box-sizing: border-box;
        }
        
        body {
            margin: 0;
            padding: 0;
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #0a0a0a 0%, #1a1a1a 50%, #0f0f0f 100%);
            color: #e5e5e5;
            min-height: 100vh;
            line-height: 1.6;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 2rem;
        }
        
        .header {
            margin-bottom: 2rem;
            text-align: center;
        }
        
        .title {
            font-size: 2.5rem;
            font-weight: 700;
            margin-bottom: 0.5rem;
            background: linear-gradient(135deg, #3b82f6 0%, #8b5cf6 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }
        
        .clip-info {
            font-size: 1.1rem;
            color: #a1a1aa;
            font-weight: 500;
        }
        
        .video-container {
            position: relative;
            width: 100%;
            background: #000;
            border-radius: 16px;
            overflow: hidden;
            box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.8);
            margin-bottom: 2rem;
            border: 1px solid #27272a;
        }
        
        video, #gif-player, #audio-player {
            width: 100%;
            height: auto;
            display: block;
        }
        
        .loading-container {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            min-height: 300px;
            background: rgba(0, 0, 0, 0.95);
            backdrop-filter: blur(10px);
            color: #d4d4d8;
        }
        
        .loading-spinner {
            width: 48px;
            height: 48px;
            border: 3px solid #3f3f46;
            border-top: 3px solid #3b82f6;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin-bottom: 1.5rem;
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        .loading-text {
            font-size: 1.125rem;
            font-weight: 600;
            margin-bottom: 0.5rem;
        }
        
        .loading-subtext {
            font-size: 0.875rem;
            color: #71717a;
        }
        
        .form-container {
            background: rgba(24, 24, 27, 0.8);
            backdrop-filter: blur(10px);
            border: 1px solid #27272a;
            padding: 2rem;
            border-radius: 16px;
            margin-bottom: 2rem;
            box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.5);
        }
        
        .form-row {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 1.5rem;
            margin-bottom: 1.5rem;
        }
        
        .form-group {
            display: flex;
            flex-direction: column;
        }
        
        .form-group label {
            font-size: 0.875rem;
            font-weight: 600;
            color: #d4d4d8;
            margin-bottom: 0.5rem;
            letter-spacing: 0.025em;
        }
        
        .form-group input, 
        .form-group textarea {
            width: 100%;
            padding: 0.875rem 1rem;
            border: 2px solid #3f3f46;
            border-radius: 8px;
            background: rgba(9, 9, 11, 0.8);
            color: #e5e5e5;
            font-size: 0.875rem;
            font-family: inherit;
            transition: all 0.2s ease;
        }
        
        .form-group input:focus, 
        .form-group textarea:focus {
            outline: none;
            border-color: #3b82f6;
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
        }
        
        .form-group textarea {
            resize: vertical;
            min-height: 100px;
        }
        
        .time-control-group {
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }
        
        .time-navigation {
            display: flex;
            gap: 0.25rem;
        }
        
        .nav-btn {
            padding: 0.5rem;
            border: 1px solid #3f3f46;
            border-radius: 4px;
            background: rgba(9, 9, 11, 0.8);
            color: #d4d4d8;
            cursor: pointer;
            font-size: 0.875rem;
            transition: all 0.2s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            min-width: 2rem;
        }
        
        .nav-btn:hover {
            background: #3f3f46;
            border-color: #52525b;
        }
        
        .nav-btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }
        
        .nav-btn:disabled:hover {
            background: rgba(9, 9, 11, 0.8);
            border-color: #3f3f46;
        }
        
        .form-group input[type="text"] {
            font-family: 'Courier New', monospace;
            letter-spacing: 0.5px;
        }
        
        .form-group input:invalid {
            border-color: #dc2626;
            box-shadow: 0 0 0 3px rgba(220, 38, 38, 0.1);
        }
        
        .transcript-line {
            display: block;
            padding: 0;
            transition: color 0.2s ease;
        }
        
        .transcript-line.highlighted {
            color: #ffffff;
            font-weight: 500;
        }
        
        .checkbox-group {
            display: flex;
            align-items: center;
            gap: 0.75rem;
            padding: 0.75rem 0;
        }
        
        .checkbox-group input[type="checkbox"] {
            width: 1.25rem;
            height: 1.25rem;
            border: 2px solid #3f3f46;
            border-radius: 4px;
            background: rgba(9, 9, 11, 0.8);
            cursor: pointer;
            transition: all 0.2s ease;
        }
        
        .checkbox-group input[type="checkbox"]:checked {
            background: #3b82f6;
            border-color: #3b82f6;
        }
        
        .checkbox-group label {
            margin: 0;
            font-size: 0.875rem;
            font-weight: 500;
            cursor: pointer;
            color: #d4d4d8;
        }
        
        .button-group {
            display: flex;
            gap: 1rem;
            justify-content: center;
            margin-top: 1.5rem;
        }
        
        .btn {
            padding: 0.875rem 2rem;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-size: 0.875rem;
            font-weight: 600;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            transition: all 0.2s ease;
            letter-spacing: 0.025em;
            text-transform: uppercase;
        }
        
        .btn-success {
            background: linear-gradient(135deg, #059669 0%, #047857 100%);
            color: white;
            box-shadow: 0 4px 14px 0 rgba(5, 150, 105, 0.3);
        }
        
        .btn-success:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px 0 rgba(5, 150, 105, 0.4);
        }
        
        .btn-success:active {
            transform: translateY(0);
        }
        
        .controls {
            text-align: center;
            padding: 2rem 0;
        }
        
        .back-link {
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            color: #71717a;
            text-decoration: none;
            font-size: 1rem;
            font-weight: 500;
            transition: all 0.2s ease;
            padding: 0.5rem 1rem;
            border-radius: 6px;
        }
        
        .back-link:hover {
            color: #3b82f6;
            background: rgba(59, 130, 246, 0.1);
        }
        
        .back-link::before {
            content: "‚Üê";
            font-size: 1.25rem;
        }
        
        /* Responsive design */
        @media (max-width: 768px) {
            .container {
                padding: 1rem;
            }
            
            .title {
                font-size: 2rem;
            }
            
            .form-container {
                padding: 1.5rem;
            }
            
            .form-row {
                grid-template-columns: 1fr;
                gap: 1rem;
            }
            
            .button-group {
                flex-direction: column;
                align-items: center;
            }
        }
        
        /* Smooth animations */
        .video-container,
        .form-container {
            animation: fadeInUp 0.6s ease-out;
        }
        
        @keyframes fadeInUp {
            from {
                opacity: 0;
                transform: translateY(20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
        
        /* Custom scrollbar */
        ::-webkit-scrollbar {
            width: 8px;
        }
        
        ::-webkit-scrollbar-track {
            background: #18181b;
        }
        
        ::-webkit-scrollbar-thumb {
            background: #3f3f46;
            border-radius: 4px;
        }
        
        ::-webkit-scrollbar-thumb:hover {
            background: #52525b;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1 class="title"><%= @filename %></h1>
            <div class="clip-info">
                Playing video clip from <%= @start_time_formatted %> to <%= @end_time_formatted %>
            </div>
        </div>
        
        <div class="video-container">
            <div id="loading-container" class="loading-container" style="display: none;">
                <div class="loading-spinner"></div>
                <div class="loading-text">Processing...</div>
                <div class="loading-subtext">Generating your clip, please wait</div>
            </div>
            <video controls autoplay id="video-player">
                <source src={@clip_url}>
                Your browser does not support the video tag.
            </video>
        </div>
        
        <div class="form-container">
            <form method="GET" action={"/clip_player/#{URI.encode(@filename)}"}>
                <div class="form-row">
                    <div class="form-group">
                        <label for="start_time">Start Time (hh:mm:ss.sss)</label>
                        <div class="time-control-group">
                            <div class="time-navigation">
                                <button type="button" id="start-prev-btn" class="nav-btn" title="Previous marker">‚èÆ</button>
                                <button type="button" id="start-next-btn" class="nav-btn" title="Next marker">‚è≠</button>
                            </div>
                            <input type="text" id="start_time" name="start_time" value={@start_time_formatted} pattern="^(\d{2}):(\d{2}):(\d{2})\.(\d{3})$" placeholder="00:00:00.000" required>
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="end_time">End Time (hh:mm:ss.sss)</label>
                        <div class="time-control-group">
                            <div class="time-navigation">
                                <button type="button" id="end-prev-btn" class="nav-btn" title="Previous marker">‚èÆ</button>
                                <button type="button" id="end-next-btn" class="nav-btn" title="Next marker">‚è≠</button>
                            </div>
                            <input type="text" id="end_time" name="end_time" value={@end_time_formatted} pattern="^(\d{2}):(\d{2}):(\d{2})\.(\d{3})$" placeholder="00:00:00.000" required>
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="font_size">Font Size</label>
                        <input type="number" id="font_size" name="font_size" value={@font_size} min="10" max="500" placeholder="Auto">
                    </div>
                </div>
                
                <div class="form-row">
                    <div class="form-group">
                        <label for="text">Text Overlay</label>
                        <textarea id="text" name="text" placeholder="Enter text to overlay on video"><%= @text %></textarea>
                    </div>
                </div>
                
                <div class="form-row">
                    <div class="form-group">
                        <div class="checkbox-group">
                            <input type="checkbox" id="display_text" name="display_text" value="true" {if @display_text == "true", do: [checked: "checked"], else: []}>
                            <label for="display_text">Show Text Overlay</label>
                        </div>
                    </div>
                </div>
                
                <div class="button-group">
                    <a href="#" download="clip.mp4" class="btn btn-success" id="download-mp4-btn">
                        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                            <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"/>
                            <polyline points="7,10 12,15 17,10"/>
                            <line x1="12" y1="15" x2="12" y2="3"/>
                        </svg>
                        Download MP4
                    </a>
                    <a href="#" download="clip.gif" class="btn btn-success" id="download-gif-btn">
                        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                            <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"/>
                            <polyline points="7,10 12,15 17,10"/>
                            <line x1="12" y1="15" x2="12" y2="3"/>
                        </svg>
                        Download GIF
                    </a>
                    <a href="#" download="clip.mp3" class="btn btn-success" id="download-mp3-btn">
                        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                            <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"/>
                            <polyline points="7,10 12,15 17,10"/>
                            <line x1="12" y1="15" x2="12" y2="3"/>
                        </svg>
                        Download MP3
                    </a>
                </div>
            </form>
        </div>
        
        <%= if @transcript && @transcript != "" do %>
            <div class="form-container">
                <h3 style="margin-bottom: 1rem; color: #d4d4d8; font-size: 1.25rem; font-weight: 600;">Transcript</h3>
                <div class="transcript-container">
                    <div id="transcript-display" style="white-space: pre-wrap; font-family: 'Inter', monospace; font-size: 0.875rem; line-height: 0.75; color: #a1a1aa; background: rgba(9, 9, 11, 0.6); padding: 1rem; border-radius: 8px; border: 1px solid #27272a; max-height: 400px; overflow-y: auto;"></div>
                </div>
            </div>
        <% end %>
        
        <div class="controls">
            <a href="/app" class="back-link">Back to Transcripts</a>
        </div>
    </div>

    <script>
        // Transcript data passed from the server
        const transcriptData = <%= raw(Jason.encode!(@transcript)) %>;
        
        document.addEventListener('DOMContentLoaded', function() {
            const form = document.querySelector('form');
            const video = document.getElementById('video-player');
            const loadingContainer = document.getElementById('loading-container');
            const loadingText = document.querySelector('.loading-text');
            const loadingSubtext = document.querySelector('.loading-subtext');
            const clipInfo = document.querySelector('.clip-info');
            
            // Get form inputs
            const startTimeInput = document.getElementById('start_time');
            const endTimeInput = document.getElementById('end_time');
            const textInput = document.getElementById('text');
            const fontSizeInput = document.getElementById('font_size');
            const displayTextInput = document.getElementById('display_text');
            
            // Get download buttons
            const downloadMp4Btn = document.getElementById('download-mp4-btn');
            const downloadGifBtn = document.getElementById('download-gif-btn');
            const downloadMp3Btn = document.getElementById('download-mp3-btn');
            
            // Get navigation buttons
            const startPrevBtn = document.getElementById('start-prev-btn');
            const startNextBtn = document.getElementById('start-next-btn');
            const endPrevBtn = document.getElementById('end-prev-btn');
            const endNextBtn = document.getElementById('end-next-btn');
            
            // Function to show loading state
            function showLoading() {
                loadingContainer.style.display = 'flex';
                video.style.display = 'none';
                loadingText.textContent = 'Processing video...';
                loadingSubtext.textContent = 'Preparing your clip';
            }
            
            // Function to hide loading state
            function hideLoading() {
                loadingContainer.style.display = 'none';
            }
            
            // Function to build clip URL with parameters
            function buildClipUrl(format = 'mp4') {
                const startTime = startTimeInput.value;
                const endTime = endTimeInput.value;
                const text = textInput.value;
                const fontSize = fontSizeInput.value;
                const displayText = displayTextInput.checked;
                
                // Convert timestamp strings to seconds for API
                const startTimeSeconds = timestampToSeconds(startTime);
                const endTimeSeconds = timestampToSeconds(endTime);
                
                const clipParams = new URLSearchParams({
                    filename: <%= raw(Jason.encode!(@filename)) %>,
                    start_time: startTimeSeconds.toString(),
                    end_time: endTimeSeconds.toString(),
                    format: format,
                    cachebuster: Date.now().toString()
                });
                
                // Add optional parameters
                if (text && text.trim() !== '') {
                    clipParams.set('text', text);
                }
                if (fontSize && fontSize.trim() !== '') {
                    clipParams.set('font_size', fontSize);
                }
                if (displayText) {
                    clipParams.set('display_text', 'true');
                }
                
                return '/clip?' + clipParams.toString();
            }
            
            // Function to generate filename
            function generateFilename(format) {
                const text = textInput.value;
                let filename = `clip.${format}`;
                
                if (text && text.trim() !== '') {
                    const sanitizedText = text.trim()
                        .substring(0, 50)
                        .replace(/[^a-zA-Z0-9\s\-_]/g, '')
                        .replace(/\s+/g, '_');
                    if (sanitizedText) {
                        filename = sanitizedText + `.${format}`;
                    }
                }
                
                return filename;
            }
            
            // Function to parse transcript and extract blocks with start/end times
            function parseTranscriptBlocks() {
                if (!transcriptData) return [];
                
                const blockRegex = /(\d{2}:\d{2}:\d{2}\.\d{3})\s*-->\s*(\d{2}:\d{2}:\d{2}\.\d{3})/g;
                const blocks = [];
                let match;
                
                while ((match = blockRegex.exec(transcriptData)) !== null) {
                    const startTime = match[1];
                    const endTime = match[2];
                    blocks.push({
                        start_time: startTime,
                        end_time: endTime
                    });
                }
                
                // Sort blocks by start time
                return blocks.sort((a, b) => timestampToSeconds(a.start_time) - timestampToSeconds(b.start_time));
            }
            
            // Function to convert timestamp (HH:MM:SS.mmm) to seconds
            function timestampToSeconds(timestamp) {
                const parts = timestamp.split(':');
                const hours = parseInt(parts[0], 10);
                const minutes = parseInt(parts[1], 10);
                const seconds = parseFloat(parts[2]);
                
                return hours * 3600 + minutes * 60 + seconds;
            }
            
            // Function to find which block index a given time falls within
            function findBlockIndex(currentTime, blocks) {
                const currentSeconds = timestampToSeconds(currentTime);
                
                for (let i = 0; i < blocks.length; i++) {
                    const block = blocks[i];
                    const blockStartSeconds = timestampToSeconds(block.start_time);
                    const blockEndSeconds = timestampToSeconds(block.end_time);
                    
                    if (currentSeconds >= blockStartSeconds && currentSeconds <= blockEndSeconds) {
                        return i;
                    }
                }
                
                // If not found within any block, find the closest block
                // Check if time is before all blocks
                if (currentSeconds < timestampToSeconds(blocks[0].start_time)) {
                    return 0;
                }
                
                // Check if time is after all blocks
                if (currentSeconds > timestampToSeconds(blocks[blocks.length - 1].end_time)) {
                    return blocks.length - 1;
                }
                
                // Find the closest block for times between blocks
                for (let i = 0; i < blocks.length - 1; i++) {
                    const currentBlockEnd = timestampToSeconds(blocks[i].end_time);
                    const nextBlockStart = timestampToSeconds(blocks[i + 1].start_time);
                    
                    if (currentSeconds > currentBlockEnd && currentSeconds < nextBlockStart) {
                        // Choose the closer block
                        const distToCurrent = currentSeconds - currentBlockEnd;
                        const distToNext = nextBlockStart - currentSeconds;
                        return distToCurrent <= distToNext ? i : i + 1;
                    }
                }
                
                return 0; // Fallback
            }
            
            // Function to parse transcript into lines with timestamps
            function parseTranscriptLines() {
                if (!transcriptData) return [];
                
                const lines = transcriptData.split('\n');
                const timestampRegex = /^(\d{2}:\d{2}:\d{2}\.\d{3})/;
                const parsedLines = [];
                
                for (let i = 0; i < lines.length; i++) {
                    const line = lines[i];
                    const match = line.match(timestampRegex);
                    
                    parsedLines.push({
                        index: i,
                        text: line,
                        timestamp: match ? match[1] : null,
                        timestampSeconds: match ? timestampToSeconds(match[1]) : null
                    });
                }
                
                return parsedLines;
            }
            
            // Function to highlight transcript lines within time range using blocks
            function highlightTranscriptLines(startTime, endTime) {
                const transcriptDisplay = document.getElementById('transcript-display');
                if (!transcriptDisplay) return;
                
                const lines = parseTranscriptLines();
                const blocks = parseTranscriptBlocks();
                const startSeconds = timestampToSeconds(startTime);
                const endSeconds = timestampToSeconds(endTime);
                
                // Find which blocks are within the selected time range
                const selectedBlocks = blocks.filter(block => {
                    const blockStart = timestampToSeconds(block.start_time);
                    const blockEnd = timestampToSeconds(block.end_time);
                    
                    // Block is selected if it overlaps with the selected time range
                    return blockStart <= endSeconds && blockEnd >= startSeconds;
                });
                
                // First pass: identify highlighted lines
                let highlightedIndices = [];
                let inSelectedBlock = false;
                
                for (let i = 0; i < lines.length; i++) {
                    const line = lines[i];
                    let isHighlighted = false;
                    
                    // Check if this line contains a block timestamp
                    const blockMatch = line.text.match(/(\d{2}:\d{2}:\d{2}\.\d{3})\s*-->\s*(\d{2}:\d{2}:\d{2}\.\d{3})/);
                    
                    if (blockMatch) {
                        const blockStartTime = blockMatch[1];
                        const blockEndTime = blockMatch[2];
                        
                        // Check if this block is in our selected blocks
                        inSelectedBlock = selectedBlocks.some(block => 
                            block.start_time === blockStartTime && block.end_time === blockEndTime
                        );
                        
                        if (inSelectedBlock) {
                            isHighlighted = true;
                        }
                    } else if (inSelectedBlock) {
                        // Content line within selected block
                        isHighlighted = true;
                    }
                    
                    if (isHighlighted) {
                        highlightedIndices.push(i);
                    }
                }
                
                // If no highlighted lines, show all lines (fallback behavior)
                if (highlightedIndices.length === 0) {
                    let highlightedHTML = '';
                    for (let i = 0; i < lines.length; i++) {
                        const line = lines[i];
                        highlightedHTML += `<span class="transcript-line" data-line-index="${i}">${escapeHtml(line.text)}</span>\n`;
                    }
                    transcriptDisplay.innerHTML = highlightedHTML;
                    return;
                }
                
                // Determine the range of lines to display (highlighted + context blocks)
                const firstHighlightedIndex = Math.min(...highlightedIndices);
                const lastHighlightedIndex = Math.max(...highlightedIndices);
                
                // Find the start and end of context blocks (previous and next blocks)
                let contextStartIndex = 0;
                let contextEndIndex = lines.length - 1;
                
                // Find the start of the previous block
                for (let i = firstHighlightedIndex - 1; i >= 0; i--) {
                    const line = lines[i];
                    if (line.text.match(/(\d{2}:\d{2}:\d{2}\.\d{3})\s*-->\s*(\d{2}:\d{2}:\d{2}\.\d{3})/)) {
                        contextStartIndex = i;
                        break;
                    }
                }
                
                // Find the end of the next block
                let foundNextBlock = false;
                for (let i = lastHighlightedIndex + 1; i < lines.length; i++) {
                    const line = lines[i];
                    if (line.text.match(/(\d{2}:\d{2}:\d{2}\.\d{3})\s*-->\s*(\d{2}:\d{2}:\d{2}\.\d{3})/)) {
                        if (foundNextBlock) {
                            contextEndIndex = i - 1;
                            break;
                        }
                        foundNextBlock = true;
                    }
                }
                
                // Generate HTML for the visible range
                let highlightedHTML = '';
                for (let i = contextStartIndex; i <= contextEndIndex; i++) {
                    const line = lines[i];
                    let cssClass = 'transcript-line';
                    
                    if (highlightedIndices.includes(i)) {
                        cssClass += ' highlighted';
                    }
                    
                    highlightedHTML += `<span class="${cssClass}" data-line-index="${i}">${escapeHtml(line.text)}</span>\n`;
                }
                
                transcriptDisplay.innerHTML = highlightedHTML;
                
                // Scroll to the first highlighted line
                const firstHighlightedElement = transcriptDisplay.querySelector(`[data-line-index="${firstHighlightedIndex}"]`);
                if (firstHighlightedElement) {
                    firstHighlightedElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
                }
            }
            
            // Function to escape HTML characters
            function escapeHtml(text) {
                const div = document.createElement('div');
                div.textContent = text;
                return div.innerHTML;
            }
            
            // Function to update navigation buttons
            function updateNavigationButtons() {
                const blocks = parseTranscriptBlocks();
                const startTime = startTimeInput.value || "00:00:00.000";
                const endTime = endTimeInput.value || "00:00:00.000";
                
                if (blocks.length === 0) {
                    startNextBtn.disabled = true;
                    startPrevBtn.disabled = true;
                    endNextBtn.disabled = true;
                    endPrevBtn.disabled = true;
                    return;
                }
                
                const startBlockIndex = findBlockIndex(startTime, blocks);
                const endBlockIndex = findBlockIndex(endTime, blocks);
                
                // Start time navigation
                startNextBtn.disabled = startBlockIndex >= blocks.length - 1;
                startPrevBtn.disabled = startBlockIndex <= 0;
                
                // End time navigation
                endNextBtn.disabled = endBlockIndex >= blocks.length - 1;
                endPrevBtn.disabled = endBlockIndex <= 0;
                
                // Update transcript highlighting
                if (isValidTimestamp(startTime) && isValidTimestamp(endTime)) {
                    highlightTranscriptLines(startTime, endTime);
                }
            }
            
            // Function to validate timestamp format
            function isValidTimestamp(timestamp) {
                const timestampRegex = /^(\d{2}):(\d{2}):(\d{2})\.(\d{3})$/;
                return timestampRegex.test(timestamp);
            }
            
            // Function to initialize transcript display
            function initializeTranscriptDisplay() {
                const transcriptDisplay = document.getElementById('transcript-display');
                if (!transcriptDisplay || !transcriptData) return;
                
                const lines = parseTranscriptLines();
                let html = '';
                
                for (const line of lines) {
                    html += `<span class="transcript-line">${escapeHtml(line.text)}</span>\n`;
                }
                
                transcriptDisplay.innerHTML = html;
            }
            
            // Function to update video and download links
            function updateVideo() {
                const startTime = startTimeInput.value;
                const endTime = endTimeInput.value;
                
                // Validate required fields and format
                if (!startTime || !endTime || !isValidTimestamp(startTime) || !isValidTimestamp(endTime)) {
                    return;
                }
                
                // Convert to seconds for comparison
                const startSeconds = timestampToSeconds(startTime);
                const endSeconds = timestampToSeconds(endTime);
                
                if (startSeconds < 0 || endSeconds <= startSeconds) {
                    return;
                }
                
                // Build URL parameters for the page URL (keep timestamps as strings)
                const urlParams = new URLSearchParams({
                    start_time: startSeconds.toString(),
                    end_time: endSeconds.toString()
                });
                
                // Add optional parameters
                const text = textInput.value;
                const fontSize = fontSizeInput.value;
                const displayText = displayTextInput.checked;
                
                if (text && text.trim() !== '') {
                    urlParams.set('text', text);
                }
                if (fontSize && fontSize.trim() !== '') {
                    urlParams.set('font_size', fontSize);
                }
                if (displayText) {
                    urlParams.set('display_text', 'true');
                }
                
                // Update video source
                const newClipUrl = buildClipUrl('mp4');
                const videoSource = video.querySelector('source');
                videoSource.src = newClipUrl;
                
                // Show loading state
                showLoading();
                
                // Handle video loading
                video.onloadeddata = function() {
                    hideLoading();
                    video.style.display = 'block';
                };
                video.onerror = function() {
                    hideLoading();
                    video.style.display = 'block'; // Still try to show it
                };
                video.load();
                
                // Update download button URLs and filenames
                downloadMp4Btn.href = buildClipUrl('mp4');
                downloadMp4Btn.download = generateFilename('mp4');
                
                downloadGifBtn.href = buildClipUrl('gif');
                downloadGifBtn.download = generateFilename('gif');
                
                downloadMp3Btn.href = buildClipUrl('mp3');
                downloadMp3Btn.download = generateFilename('mp3');
                
                // Update clip info
                clipInfo.textContent = `Playing video clip from ${startTime} to ${endTime}`;
                
                // Update browser URL
                const newUrl = window.location.pathname + '?' + urlParams.toString();
                history.replaceState(null, '', newUrl);
                
                // Update transcript highlighting
                highlightTranscriptLines(startTime, endTime);
            }
            
            // Add event listeners with debouncing
            let updateTimeout;
            function debouncedUpdate() {
                clearTimeout(updateTimeout);
                updateTimeout = setTimeout(updateVideo, 500); // 500ms delay
            }
            
            // Set initial state
            initializeTranscriptDisplay();
            updateVideo();
            hideLoading(); // Make sure loading is hidden on initial load
            
            // Function to validate and format timestamp input
            function validateTimestampInput(input) {
                const value = input.value;
                const isValid = isValidTimestamp(value);
                
                if (isValid) {
                    input.setCustomValidity('');
                } else if (value.length > 0) {
                    input.setCustomValidity('Please enter time in format hh:mm:ss.sss (e.g., 00:01:30.500)');
                }
                
                return isValid;
            }
            
            // Listen for input changes
            startTimeInput.addEventListener('input', function() {
                validateTimestampInput(this);
                debouncedUpdate();
                updateNavigationButtons();
            });
            endTimeInput.addEventListener('input', function() {
                validateTimestampInput(this);
                debouncedUpdate();
                updateNavigationButtons();
            });
            textInput.addEventListener('input', debouncedUpdate);
            fontSizeInput.addEventListener('input', debouncedUpdate);
            displayTextInput.addEventListener('change', updateVideo); // Immediate update for checkbox
            
            // Add navigation button event listeners
            startPrevBtn.addEventListener('click', function() {
                const blocks = parseTranscriptBlocks();
                const currentTime = startTimeInput.value || "00:00:00.000";
                const currentBlockIndex = findBlockIndex(currentTime, blocks);
                
                if (currentBlockIndex > 0) {
                    const prevBlockIndex = currentBlockIndex - 1;
                    const prevBlock = blocks[prevBlockIndex];
                    startTimeInput.value = prevBlock.start_time;
                    updateVideo();
                    updateNavigationButtons();
                }
            });
            
            startNextBtn.addEventListener('click', function() {
                const blocks = parseTranscriptBlocks();
                const currentTime = startTimeInput.value || "00:00:00.000";
                const currentBlockIndex = findBlockIndex(currentTime, blocks);
                
                if (currentBlockIndex < blocks.length - 1) {
                    const nextBlockIndex = currentBlockIndex + 1;
                    const nextBlock = blocks[nextBlockIndex];
                    startTimeInput.value = nextBlock.start_time;
                    updateVideo();
                    updateNavigationButtons();
                }
            });
            
            endPrevBtn.addEventListener('click', function() {
                const blocks = parseTranscriptBlocks();
                const currentTime = endTimeInput.value || "00:00:00.000";
                const currentBlockIndex = findBlockIndex(currentTime, blocks);
                
                if (currentBlockIndex > 0) {
                    const prevBlockIndex = currentBlockIndex - 1;
                    const prevBlock = blocks[prevBlockIndex];
                    endTimeInput.value = prevBlock.end_time;
                    
                    // Ensure end time index is not less than start time index
                    const startTime = startTimeInput.value || "00:00:00.000";
                    const startBlockIndex = findBlockIndex(startTime, blocks);
                    
                    if (prevBlockIndex < startBlockIndex) {
                        endTimeInput.value = blocks[startBlockIndex].end_time;
                    }
                    
                    updateVideo();
                    updateNavigationButtons();
                }
            });
            
            endNextBtn.addEventListener('click', function() {
                const blocks = parseTranscriptBlocks();
                const currentTime = endTimeInput.value || "00:00:00.000";
                const currentBlockIndex = findBlockIndex(currentTime, blocks);
                
                if (currentBlockIndex < blocks.length - 1) {
                    const nextBlockIndex = currentBlockIndex + 1;
                    const nextBlock = blocks[nextBlockIndex];
                    endTimeInput.value = nextBlock.end_time;
                    updateVideo();
                    updateNavigationButtons();
                }
            });
            
            // Initialize navigation buttons
            updateNavigationButtons();
        });
    </script>
</body>
</html> 