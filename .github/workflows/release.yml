name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    name: Build for ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - target: windows-x86_64
            os: windows-latest
            rust_target: x86_64-pc-windows-msvc
            binary_name: atci.exe
            zip_name: atci-windows-x86_64.zip
          - target: macos-aarch64
            os: macos-latest
            rust_target: aarch64-apple-darwin
            binary_name: atci
            zip_name: atci-macos-aarch64.zip

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.rust_target }}

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Install system dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          # Install any required system dependencies for macOS
          echo "Installing macOS dependencies..."

      - name: Install system dependencies (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          # Install any required system dependencies for Windows
          echo "Installing Windows dependencies..."

      - name: Build release binary
        run: |
          cargo build --release --target ${{ matrix.rust_target }}

      - name: Create ZIP archive (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          cd target/${{ matrix.rust_target }}/release
          7z a ../../../${{ matrix.zip_name }} ${{ matrix.binary_name }}

      - name: Create ZIP archive (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          cd target/${{ matrix.rust_target }}/release
          zip ../../../${{ matrix.zip_name }} ${{ matrix.binary_name }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.zip_name }}
          path: ${{ matrix.zip_name }}

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false

      - name: Upload Windows Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./atci-windows-x86_64.zip/atci-windows-x86_64.zip
          asset_name: atci-windows-x86_64.zip
          asset_content_type: application/zip

      - name: Upload macOS Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./atci-macos-aarch64.zip/atci-macos-aarch64.zip
          asset_name: atci-macos-aarch64.zip
          asset_content_type: application/zip