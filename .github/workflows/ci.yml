name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  format:
    name: Format Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt
      - name: Check formatting
        run: cargo fmt --all -- --check

  lint:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy
      - uses: Swatinem/rust-cache@v2
      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

  test:
    name: Test
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: macos-latest
            target: aarch64-apple-darwin
          - os: windows-latest
            target: x86_64-pc-windows-msvc
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      - uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}
      - name: Run tests
        run: cargo test --target ${{ matrix.target }} --all-features

  build:
    name: Build
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: atci
            asset_name: atci-linux-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: atci
            asset_name: atci-macos-aarch64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: atci.exe
            asset_name: atci-windows-x86_64.exe
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      - uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}
      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }}
      - name: Rename binary (Unix)
        if: matrix.os != 'windows-latest'
        run: mv target/${{ matrix.target }}/release/${{ matrix.artifact_name }} target/${{ matrix.target }}/release/${{ matrix.asset_name }}
      - name: Rename binary (Windows)
        if: matrix.os == 'windows-latest'
        run: mv target/${{ matrix.target }}/release/${{ matrix.artifact_name }} target/${{ matrix.target }}/release/${{ matrix.asset_name }}
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: target/${{ matrix.target }}/release/${{ matrix.asset_name }}
          retention-days: 30

  download-urls:
    name: Download URLs
    runs-on: ubuntu-latest
    needs: build
    if: always() && needs.build.result == 'success' && github.event_name == 'pull_request'
    permissions:
      pull-requests: write
    steps:
      - name: Post PR comment with download URLs
        uses: actions/github-script@v7
        with:
          script: |
            const comment = `## ðŸš€ Build Artifacts Ready!

            | Platform | Architecture | Download URL |
            |----------|--------------|--------------|
            | Linux | x86_64 | [atci-linux-x86_64](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts/atci-linux-x86_64) |
            | macOS | ARM64 | [atci-macos-aarch64](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts/atci-macos-aarch64) |
            | Windows | x86_64 | [atci-windows-x86_64.exe](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts/atci-windows-x86_64.exe) |

            *Built from commit ${{ github.sha }}*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });